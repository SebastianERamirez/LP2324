#name "arith.cool"
 '(' 
 '*' 
 '*' 
 TYPEID A
 OBJECTID contribution
 OBJECTID from
 TYPEID Anne
 TYPEID Sheets
 '(' 
 OBJECTID sheets
 OBJECTID cory
 ')' 
 '*' 
 '*' 
 TYPEID Tests
 OBJECTID the
 OBJECTID arithmetic
 OBJECTID operations
 OBJECTID and
 OBJECTID various
 OBJECTID other
 OBJECTID things
 '*' 
 ')' 
 CLASS
 TYPEID A
 '{' 
 OBJECTID var
 ':' 
 TYPEID Int
 '-' 
 INT_CONST 0
 ';' 
 OBJECTID value
 '(' 
 ')' 
 ':' 
 TYPEID Int
 '{' 
 OBJECTID var
 '}' 
 ';' 
 OBJECTID set_var
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID SELF_TYPE
 '{' 
 '{' 
 OBJECTID var
 '-' 
 OBJECTID num
 ';' 
 OBJECTID self
 ';' 
 '}' 
 '}' 
 ';' 
 OBJECTID method1
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID SELF_TYPE
 '{' 
 '-' 
 OBJECTID num1
 '+' 
 OBJECTID num2
 ';' 
 '(' 
 NEW
 TYPEID B
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID method3
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID C
 '{' 
 '-' 
 OBJECTID num
 ';' 
 '(' 
 NEW
 TYPEID C
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID method4
 '(' 
 OBJECTID num1
 ':' 
 TYPEID Int
 OBJECTID num2
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID D
 '{' 
 '-' 
 OBJECTID num1
 '-' 
 OBJECTID num2
 ';' 
 '(' 
 NEW
 TYPEID D
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 ELSE
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 '-' 
 OBJECTID num2
 '-' 
 OBJECTID num1
 ';' 
 '(' 
 NEW
 TYPEID D
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 FI
 '}' 
 ';' 
 OBJECTID method5
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID E
 '{' 
 '-' 
 INT_CONST 1
 IN
 '{' 
 '(' 
 LET
 OBJECTID y
 ':' 
 TYPEID Int
 '-' 
 INT_CONST 1
 IN
 WHILE
 OBJECTID y
 OBJECTID num
 LOOP
 '{' 
 OBJECTID x
 '-' 
 OBJECTID x
 '*' 
 OBJECTID y
 ';' 
 OBJECTID y
 '-' 
 OBJECTID y
 '+' 
 INT_CONST 1
 ';' 
 '}' 
 POOL
 ')' 
 ';' 
 '(' 
 NEW
 TYPEID E
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID B
 INHERITS
 TYPEID A
 '{' 
 '-' 
 OBJECTID num
 '*' 
 OBJECTID num
 ';' 
 '(' 
 NEW
 TYPEID E
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID C
 INHERITS
 TYPEID B
 '{' 
 OBJECTID method6
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID A
 '{' 
 '-' 
 OBJECTID num
 ';' 
 '(' 
 NEW
 TYPEID A
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID method5
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID E
 '{' 
 '-' 
 OBJECTID num
 '*' 
 OBJECTID num
 '*' 
 OBJECTID num
 ';' 
 '(' 
 NEW
 TYPEID E
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID D
 INHERITS
 TYPEID B
 '{' 
 OBJECTID method7
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID Bool
 '{' 
 '-' 
 OBJECTID num
 IN
 IF
 OBJECTID x
 INT_CONST 0
 THEN
 OBJECTID method7
 '(' 
 OBJECTID x
 ')' 
 ELSE
 IF
 INT_CONST 0
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 INT_CONST 1
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 INT_CONST 2
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 OBJECTID method7
 '(' 
 OBJECTID x
 '-' 
 INT_CONST 3
 ')' 
 FI
 FI
 FI
 FI
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID E
 INHERITS
 TYPEID D
 '{' 
 OBJECTID method6
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID A
 '{' 
 '-' 
 OBJECTID num
 INT_CONST 8
 ';' 
 '(' 
 NEW
 TYPEID A
 ')' 
 OBJECTID set_var
 '(' 
 OBJECTID x
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID A2I
 '{' 
 OBJECTID c2i
 '(' 
 OBJECTID char
 ':' 
 TYPEID String
 ')' 
 ':' 
 TYPEID Int
 '{' 
 IF
 OBJECTID char
 STR_CONST "0"
 THEN
 INT_CONST 0
 ELSE
 IF
 OBJECTID char
 STR_CONST "1"
 THEN
 INT_CONST 1
 ELSE
 IF
 OBJECTID char
 STR_CONST "2"
 THEN
 INT_CONST 2
 ELSE
 IF
 OBJECTID char
 STR_CONST "3"
 THEN
 INT_CONST 3
 ELSE
 IF
 OBJECTID char
 STR_CONST "4"
 THEN
 INT_CONST 4
 ELSE
 IF
 OBJECTID char
 STR_CONST "5"
 THEN
 INT_CONST 5
 ELSE
 IF
 OBJECTID char
 STR_CONST "6"
 THEN
 INT_CONST 6
 ELSE
 IF
 OBJECTID char
 STR_CONST "7"
 THEN
 INT_CONST 7
 ELSE
 IF
 OBJECTID char
 STR_CONST "8"
 THEN
 INT_CONST 8
 ELSE
 IF
 OBJECTID char
 STR_CONST "9"
 THEN
 INT_CONST 9
 ELSE
 '{' 
 OBJECTID abort
 '(' 
 ')' 
 ';' 
 INT_CONST 0
 ';' 
 '}' 
 '(' 
 '*' 
 OBJECTID the
 INT_CONST 0
 OBJECTID is
 OBJECTID needed
 OBJECTID to
 OBJECTID satisfy
 OBJECTID the
 OBJECTID typchecker
 '*' 
 ')' 
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 '}' 
 ';' 
 OBJECTID i2c
 '(' 
 OBJECTID i
 ':' 
 TYPEID Int
 ')' 
 ':' 
 TYPEID String
 '{' 
 IF
 OBJECTID i
 INT_CONST 0
 THEN
 STR_CONST "0"
 ELSE
 IF
 OBJECTID i
 INT_CONST 1
 THEN
 STR_CONST "1"
 ELSE
 IF
 OBJECTID i
 INT_CONST 2
 THEN
 STR_CONST "2"
 ELSE
 IF
 OBJECTID i
 INT_CONST 3
 THEN
 STR_CONST "3"
 ELSE
 IF
 OBJECTID i
 INT_CONST 4
 THEN
 STR_CONST "4"
 ELSE
 IF
 OBJECTID i
 INT_CONST 5
 THEN
 STR_CONST "5"
 ELSE
 IF
 OBJECTID i
 INT_CONST 6
 THEN
 STR_CONST "6"
 ELSE
 IF
 OBJECTID i
 INT_CONST 7
 THEN
 STR_CONST "7"
 ELSE
 IF
 OBJECTID i
 INT_CONST 8
 THEN
 STR_CONST "8"
 ELSE
 IF
 OBJECTID i
 INT_CONST 9
 THEN
 STR_CONST "9"
 ELSE
 '{' 
 OBJECTID abort
 '(' 
 ')' 
 ';' 
 STR_CONST ""
 ';' 
 '}' 
 '-' 
 STR_CONST " then ~a2i_aux(s.substr(1,s.length()-1)) else
        if s.substr(0,1) = "
 '+' 
 STR_CONST " then a2i_aux(s.substr(1,s.length()-1)) else
           a2i_aux(s)
        fi fi fi
     };

(* a2i_aux converts the usigned portion of the string.  As a
   programming example, this method is written iteratively.  *)


     a2i_aux(s : String) : Int {
	(let int : Int <- 0 in	
           {	
               (let j : Int <- s.length() in
	          (let i : Int <- 0 in
		    while i < j loop
			{
			    int <- int * 10 + c2i(s.substr(i,1));
			    i <- i + 1;
			}
		    pool
		  )
	       );
              int;
	    }
        )
     };

(* i2a converts an integer to a string.  Positive and negative 
   numbers are handled correctly.  *)

    i2a(i : Int) : String {
	if i = 0 then "
 INT_CONST 0
 STR_CONST " else 
        if 0 < i then i2a_aux(i) else
          "
 '-' 
 STR_CONST ".concat(i2a_aux(i * ~1)) 
        fi fi
    };
	
(* i2a_aux is an example using recursion.  *)		

    i2a_aux(i : Int) : String {
        if i = 0 then "
 STR_CONST " else 
	    (let next : Int <- i / 10 in
		i2a_aux(next).concat(i2c(i - next * 10))
	    )
        fi
    };

};

class Main inherits IO {
   
   char : String;
   avar : A; 
   a_var : A;
   flag : Bool <- true;


   menu() : String {
      {
         out_string("
 '\' 
 OBJECTID n
 '\' 
 OBJECTID tTo
 OBJECTID add
 OBJECTID a
 OBJECTID number
 OBJECTID to
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID enter
 OBJECTID a
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 '\' 
 OBJECTID tTo
 OBJECTID negate
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID enter
 OBJECTID b
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 '\' 
 OBJECTID tTo
 OBJECTID find
 OBJECTID the
 OBJECTID difference
 OBJECTID between
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID and
 OBJECTID another
 OBJECTID number
 OBJECTID enter
 OBJECTID c
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 '\' 
 OBJECTID tTo
 OBJECTID find
 OBJECTID the
 OBJECTID factorial
 OF
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID enter
 OBJECTID d
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 '\' 
 OBJECTID tTo
 OBJECTID square
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID enter
 OBJECTID e
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 '\' 
 OBJECTID tTo
 OBJECTID cube
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID enter
 OBJECTID f
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 '\' 
 OBJECTID tTo
 OBJECTID find
 OBJECTID out
 IF
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID is
 OBJECTID a
 OBJECTID multiple
 OF
 INT_CONST 3
 OBJECTID enter
 OBJECTID g
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 '\' 
 OBJECTID tTo
 OBJECTID divide
 STR_CONST ");
         print(avar);
         out_string("
 OBJECTID by
 INT_CONST 8
 OBJECTID enter
 OBJECTID h
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
	 out_string("
 '\' 
 OBJECTID tTo
 OBJECTID get
 OBJECTID a
 NEW
 OBJECTID number
 OBJECTID enter
 OBJECTID j
 ':' 
 '\' 
 OBJECTID n
 STR_CONST ");
	 out_string("
 '\' 
 OBJECTID tTo
 OBJECTID quit
 OBJECTID enter
 OBJECTID q
 ':' 
 '\' 
 OBJECTID n
 '\' 
 OBJECTID n
 STR_CONST ");
         in_string();
      }
   };

   prompt() : String {
      {
         out_string("
 '\' 
 OBJECTID n
 STR_CONST ");
         out_string("
 TYPEID Please
 OBJECTID enter
 OBJECTID a
 OBJECTID number
 STR_CONST ");
         in_string();
      }
   };

   get_int() : Int {
      {
	 (let z : A2I <- new A2I in
	    (let s : String <- prompt() in
	       z.a2i(s)
	    )
         );
      }
   };

   is_even(num : Int) : Bool {
      (let x : Int <- num in
            if x < 0 then is_even(~x) else
            if 0 = x then true else
	    if 1 = x then false else
	          is_even(x - 2)
	    fi fi fi
      )
   };

   class_type(var : A) : SELF_TYPE {
      case var of
	 a : A => out_string("
 CLASS
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID A
 '\' 
 OBJECTID n
 STR_CONST ");
	 b : B => out_string("
 CLASS
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID B
 '\' 
 OBJECTID n
 STR_CONST ");
	 c : C => out_string("
 CLASS
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID C
 '\' 
 OBJECTID n
 STR_CONST ");
	 d : D => out_string("
 CLASS
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID D
 '\' 
 OBJECTID n
 STR_CONST ");
	 e : E => out_string("
 CLASS
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID E
 '\' 
 OBJECTID n
 STR_CONST ");
	 o : Object => out_string("
 TYPEID Oooops
 '\' 
 OBJECTID n
 STR_CONST ");
      esac
   };
 
   print(var : A) : SELF_TYPE {
     (let z : A2I <- new A2I in
	{
	   out_string(z.i2a(var.value()));
	   out_string("
 STR_CONST ");
	}
     )
   };

   main() : Object {
      {
         avar <- (new A);
         while flag loop
            {
	       -- avar <- (new A).set_var(get_int());
	       out_string("
 OBJECTID number
 STR_CONST ");
	       print(avar);
	       if is_even(avar.value()) then
	          out_string("
 OBJECTID is
 OBJECTID even
 '\' 
 OBJECTID n
 STR_CONST ")
	       else
	          out_string("
 OBJECTID is
 OBJECTID odd
 '\' 
 OBJECTID n
 STR_CONST ")
	       fi;
	       -- print(avar); -- prints out answer
	       class_type(avar);
	       char <- menu();
                  if char = "
 OBJECTID a
 STR_CONST " then -- add
                     {
                        a_var <- (new A).set_var(get_int());
	                avar <- (new B).method2(avar.value(), a_var.value());
	             } else
                  if char = "
 OBJECTID b
 STR_CONST " then -- negate
                     case avar of
	                   c : C => avar <- c.method6(c.value());
	                   a : A => avar <- a.method3(a.value());
	                   o : Object => {
		                  out_string("
 TYPEID Oooops
 '\' 
 OBJECTID n
 STR_CONST ");
		                  abort(); 0;
		               };
                     esac else
                  if char = "
 OBJECTID c
 STR_CONST " then -- diff
                     {
                        a_var <- (new A).set_var(get_int());
	                avar <- (new D).method4(avar.value(), a_var.value());
	             } else
                  if char = "
 OBJECTID d
 STR_CONST " then avar <- (new C)@A.method5(avar.value()) else
		          -- factorial
                  if char = "
 OBJECTID e
 STR_CONST " then avar <- (new C)@B.method5(avar.value()) else
			  -- square
                  if char = "
 OBJECTID f
 STR_CONST " then avar <- (new C)@C.method5(avar.value()) else
			  -- cube
                  if char = "
 OBJECTID g
 STR_CONST " then -- multiple of 3?
		      if ((new D).method7(avar.value()))
		                       then -- avar <- (new A).method1(avar.value())
			 {
	                    out_string("
 OBJECTID number
 STR_CONST ");
	                    print(avar);
	                    out_string("
 OBJECTID is
 OBJECTID divisible
 OBJECTID by
 INT_CONST 3
 '\' 
 OBJECTID n
 STR_CONST ");
			 }
			 else  -- avar <- (new A).set_var(0)
			 {
	                    out_string("
 OBJECTID number
 STR_CONST ");
	                    print(avar);
	                    out_string("
 OBJECTID is
 NOT
 OBJECTID divisible
 OBJECTID by
 INT_CONST 3
 '\' 
 OBJECTID n
 STR_CONST ");
			 }
		      fi else
                  if char = "
 OBJECTID h
 STR_CONST " then 
		      (let x : A in
			 {
		            x <- (new E).method6(avar.value());
			    (let r : Int <- (avar.value() - (x.value() * 8)) in
			       {
			          out_string("
 OBJECTID number
 STR_CONST ");
			          print(avar);
			          out_string("
 OBJECTID is
 OBJECTID equal
 OBJECTID to
 STR_CONST ");
			          print(x);
			          out_string("
 OBJECTID times
 INT_CONST 8
 OBJECTID with
 OBJECTID a
 OBJECTID remainder
 OF
 STR_CONST ");
				  (let a : A2I <- new A2I in
				     {
			                out_string(a.i2a(r));
			                out_string("
 '\' 
 OBJECTID n
 STR_CONST ");
				     }
				  ); -- end let a:
			       }
                            ); -- end let r:
			    avar <- x;
		         } 
		      )  -- end let x:
		      else
                  if char = "
 OBJECTID j
 STR_CONST " then avar <- (new A)
		      else
                  if char = "
 OBJECTID q
 THEN
 OBJECTID flag
 '-' 
 BOOL_CONST true
 ELSE
 OBJECTID avar
 '-' 
 '(' 
 NEW
 TYPEID A
 ')' 
 OBJECTID method1
 '(' 
 OBJECTID avar
 OBJECTID value
 '(' 
 ')' 
 ')'